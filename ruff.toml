# Ruff configuration - strict but practical
target-version = "py311"
line-length = 100
indent-width = 4

[lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "YTT",    # flake8-2020
    "ASYNC",  # flake8-async
    "S",      # flake8-bandit
    "BLE",    # flake8-blind-except
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "COM",    # flake8-commas
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "EM",     # flake8-errmsg
    "FA",     # flake8-future-annotations
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "G",      # flake8-logging-format
    "INP",    # flake8-no-pep420
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "PYI",    # flake8-pyi
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "SLOT",   # flake8-slots
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "TCH",    # flake8-type-checking
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate
    "PD",     # pandas-vet
    "PGH",    # pygrep-hooks
    "PL",     # pylint
    "TRY",    # tryceratops
    "FLY",    # flynt
    "NPY",    # numpy-specific rules
    "PERF",   # performance anti-patterns
    "RUF",    # ruff-specific rules
]

ignore = [
    "COM812",  # trailing comma missing (conflicts with formatter)
    "ISC001",  # single line implicit string concatenation (conflicts with formatter)
    "S101",    # use of assert detected (we use pytest)
    "PLR0913", # too many arguments to function call
    "TRY003",  # avoid specifying long messages outside exception class
    "TRY301",  # abstract raise to inner function (overly strict)
]

# Allow fix for all enabled rules (when `--fix` is provided)
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[lint.per-file-ignores]
"tests/**/*.py" = [
    "S",       # security checks not needed in tests
    "PLR2004", # magic values are fine in tests
    "ARG",     # unused arguments are fine in fixtures
]
"test_*.py" = [
    "T201",    # print allowed in test scripts
    "S105",    # hardcoded secrets ok in test scripts
    "E501",    # line length ok in test scripts
    "PLC0415", # top-level imports ok in test scripts
]

[lint.mccabe]
max-complexity = 10

[lint.isort]
known-first-party = ["naut_hedgegrid"]
combine-as-imports = true

[lint.flake8-type-checking]
runtime-evaluated-base-classes = ["pydantic.BaseModel"]

[format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
